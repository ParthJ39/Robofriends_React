{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","ErrorBoundary","state","hasError","this","setState","Component","SearchBox","searchfield","searchChange","type","placeholder","onChange","particlesOptions","particles","number","value","density","enable","value_area","color","opacity","anim","size","random","speed","line_linked","move","App","useState","setRobots","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","params","event","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNASeA,EARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,SAApE,SACGJ,EAAMK,YCSIC,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAC1B,OACC,sBAAKC,UAAU,oDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,0BAAsDG,IAAI,WAClE,gCACG,6BAAKL,IACL,4BAAIC,WCcIK,EAnBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEjB,OACC,8BAEGA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACI,cAAC,EAAD,CAEDR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZM,EAAOG,GAAGR,U,gCCeVS,E,kDAtBd,WAAYlB,GAAO,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACZC,UAAW,GAHK,E,qDAOlB,WACCC,KAAKC,SAAS,CAACF,UAAU,M,oBAI1B,WACC,OAAGC,KAAKF,MAAMC,SAEZ,gFAGKC,KAAKrB,MAAMK,a,GAnBQkB,aCYbC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,qBAAKhB,UAAU,MAAf,SACC,uBACIA,UAAU,mCACbiB,KAAK,SACLC,YAAY,gBACZC,SAAUH,O,iBCARI,G,OAAmB,CACzBC,UAAW,CACEC,OAAQ,CACJC,MAAO,IACPC,QAAS,CACLC,QAAQ,EACRC,WAAY,MAGpBC,MAAO,CACHJ,MAAO,QAEXK,QAAS,CACLL,MAAO,GACPM,KAAM,CACFJ,QAAQ,IAGhBK,KAAM,CACFP,MAAO,EACPQ,QAAQ,EACRF,KAAM,CACFJ,QAAQ,EACRO,MAAO,IAGfC,YAAa,CACTR,QAAQ,GAEZS,KAAM,CACFF,MAAO,OA6CTG,MAvCf,WAII,MAA+CC,mBAAS,IAAxD,mBAAOhC,EAAP,KAA0BiC,EAA1B,KACH,EAA+CD,mBAAS,IAAxD,mBAAOrB,EAAP,KAA0BuB,EAA1B,KAGAC,qBAAU,WACTC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAUP,EAAUO,QACzB,IAEF,IAIOC,EAAiBzC,EAAO0C,QAAO,SAAAC,GAClC,OAAOA,EAAMlD,KAAKmD,cAAcC,SAASlC,EAAYiC,kBAGxD,OAAS5C,EAAO8C,OAGb,sBAAKlD,UAAU,KAAf,UACK,cAAC,IAAD,CAAWA,UAAU,YAAYmD,OAAQ/B,IAC7C,oBAAIpB,UAAU,KAAd,8BACA,cAAC,EAAD,CAAWgB,aAdO,SAACoC,GACvBd,EAAec,EAAMC,OAAO9B,UAcxB,cAAC,EAAD,UACG,cAAC,EAAD,UACG,cAAC,EAAD,CAAUnB,OAAQyC,WAR1B,0CCvDWS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c3e16519.chunk.js","sourcesContent":["\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border:'1px solid black', height: '500px'}}>\r\n\t\t  {props.children}\r\n\t\t</div>\r\n\t );\r\n}\r\n\r\nexport default Scroll;","\r\nconst Card = ({name, email,id}) =>{\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pas3 ma2 grow bw2 shadow-5'>\r\n\t\t  <img src={`https://robohash.org/${id}?set=set2&size=300x300`} alt='robots'/>\r\n\t\t  <div>\r\n\t\t\t    <h2>{name}</h2>\r\n\t\t\t    <p>{email}</p>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t );\r\n}\r\n\r\nexport default Card;","import Card from './Card'\r\n\r\nconst CardList = ({robots}) =>{\r\n\t\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t  robots.map((user,i) => {\r\n\t\t\t\t\t  return(\r\n\t\t\t\t\t\t     <Card \r\n\t\t\t\t\t\t\t   key={robots[i].id} \r\n\t\t\t\t\t\t\t   id={robots[i].id} \r\n\t\t\t\t\t\t\t   name={robots[i].name} \r\n\t\t\t\t\t\t\t   email={robots[i].email}\r\n\t\t\t\t\t\t   />\r\n\t\t\t\t         );\r\n\t\t             })\r\n\t            }\r\n            </div>\r\n         );\r\n     }\r\nexport default CardList;","import { Component }from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(){\r\n\t\tthis.setState({hasError: true})\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn(\r\n\t\t\t\t<h1>Sorry for the Error. Fixing it in Sometime....</h1>\r\n\t\t\t\t);\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary","\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t    className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t />\r\n         </div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import { useState, useEffect } from 'react';\r\nimport Scroll from '../components/Scroll'\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport SearchBox from '../components/SearchBox';\r\nimport Particles from 'react-particles-js';\r\nimport './App.css'\r\n\r\nconst particlesOptions = {\r\nparticles: {\r\n\t            number: {\r\n\t                value: 300,\r\n\t                density: {\r\n\t                    enable: true,\r\n\t                    value_area: 1000\r\n\t                }\r\n\t            },\r\n\t            color: {\r\n\t                value: '#fff'\r\n\t            },\r\n\t            opacity: {\r\n\t                value: 0.4,\r\n\t                anim: {\r\n\t                    enable: true\r\n\t                }\r\n\t            },\r\n\t            size: {\r\n\t                value: 5,\r\n\t                random: true,\r\n\t                anim: {\r\n\t                    enable: true,\r\n\t                    speed: 2\r\n\t                }\r\n\t            },\r\n\t            line_linked: {\r\n\t                enable: false\r\n\t            },\r\n\t            move: {\r\n\t                speed: 0.2\r\n\t            }\r\n\t         }    \r\n}\r\n\r\n\r\nfunction App() {\r\n\t\r\n\t// This is the place where we create hooks, here we create state hook\r\n\t//     stateName      functionTOChangeState    initial value for the state\r\n    const [robots,            setRobots        ] = useState([])\r\n\tconst [searchfield,       setSearchfield   ] = useState('')\r\n\r\n\t// In hooks instead of ComponentDidMount we use Effect hook\r\n\tuseEffect(() => {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => {setRobots(users)});\r\n\t},[]) // Here we put [] run effect when list is empty i.e. when the componenet mounts(its a shorthand version to use componentDidMount using Hooks)\r\n\r\n\tconst onSearchChange = (event) => {\r\n\t\tsetSearchfield(event.target.value)\r\n\t }\r\n\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\t  return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t    })\r\n\r\n\t\treturn  !robots.length ?\r\n\t\t\t <h1>Loading</h1> :\r\n                (\r\n\t\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t     <Particles className=\"particles\" params={particlesOptions} />\r\n\t\t\t\t\t\t<h1 className='f1'> Friends for All</h1>\r\n\t\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t  <ErrorBoundary>\r\n\t\t\t\t\t\t\t     <CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t\t  </ErrorBoundary>\r\n\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t</div>\r\n                 );\r\n\t}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}